<H3 tabIndex=-1 id=user-content-kryo style='BOX-SIZING: border-box; FONT-SIZE: 1.25em; MARGIN-BOTTOM: 16px; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 24px; TEXT-TRANSFORM: none; COLOR: rgb(31,35,40); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.25; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><A class=heading-link style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: ; BACKGROUND-COLOR: transparent; text-underline-offset: 0.2rem" href="https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/basis/serialization.md#kryo"><FONT color=#0066cc>Kryo<SVG aria-hidden=true class="octicon octicon-link" height="16" width="16" version="1.1" viewBox="0 0 16 16"><PATH d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></PATH></SVG></FONT></A></H3>
<P style='BOX-SIZING: border-box; FONT-SIZE: 16px; MARGIN-BOTTOM: 16px; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(31,35,40); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>Kryo &#26159;&#19968;&#20010;&#39640;&#24615;&#33021;&#30340;&#24207;&#21015;&#21270;/&#21453;&#24207;&#21015;&#21270;&#24037;&#20855;&#65292;&#30001;&#20110;&#20854;&#21464;&#38271;&#23384;&#20648;&#29305;&#24615;&#24182;&#20351;&#29992;&#20102;&#23383;&#33410;&#30721;&#29983;&#25104;&#26426;&#21046;&#65292;&#25317;&#26377;&#36739;&#39640;&#30340;&#36816;&#34892;&#36895;&#24230;&#21644;&#36739;&#23567;&#30340;&#23383;&#33410;&#30721;&#20307;&#31215;&#12290;</P>
<P style='BOX-SIZING: border-box; FONT-SIZE: 16px; MARGIN-BOTTOM: 16px; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(31,35,40); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>&#21478;&#22806;&#65292;Kryo &#24050;&#32463;&#26159;&#19968;&#31181;&#38750;&#24120;&#25104;&#29087;&#30340;&#24207;&#21015;&#21270;&#23454;&#29616;&#20102;&#65292;&#24050;&#32463;&#22312; Twitter&#12289;Groupon&#12289;Yahoo &#20197;&#21450;&#22810;&#20010;&#33879;&#21517;&#24320;&#28304;&#39033;&#30446;&#65288;&#22914; Hive&#12289;Storm&#65289;&#20013;&#24191;&#27867;&#30340;&#20351;&#29992;&#12290;</P>
<P style='BOX-SIZING: border-box; FONT-SIZE: 16px; MARGIN-BOTTOM: 16px; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(31,35,40); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><A style="BOX-SIZING: border-box; TEXT-DECORATION: underline; COLOR: ; BACKGROUND-COLOR: transparent; text-underline-offset: 0.2rem" href="https://github.com/Snailclimb/guide-rpc-framework"><FONT color=#0066cc>guide-rpc-framework</FONT></A><SPAN>&nbsp;</SPAN>&#23601;&#26159;&#20351;&#29992;&#30340; kryo &#36827;&#34892;&#24207;&#21015;&#21270;&#65292;&#24207;&#21015;&#21270;&#21644;&#21453;&#24207;&#21015;&#21270;&#30456;&#20851;&#30340;&#20195;&#30721;&#22914;&#19979;&#65306;</P>
<DIV class="highlight highlight-source-java notranslate position-relative overflow-auto" style='BOX-SIZING: border-box; FONT-SIZE: 16px; OVERFLOW: auto !important; MARGIN-BOTTOM: 16px; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative !important; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(31,35,40); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; justify-content: space-between'><PRE style='BOX-SIZING: border-box; FONT-SIZE: 13px; OVERFLOW: auto; MARGIN-BOTTOM: 0px; FONT-FAMILY: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono", monospace; MARGIN-TOP: 0px; WORD-BREAK: normal; COLOR: ; PADDING-BOTTOM: 16px; PADDING-TOP: 16px; PADDING-LEFT: 16px; LINE-HEIGHT: 1.45; PADDING-RIGHT: 16px; border-radius: 6px; overflow-wrap: normal'><SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: ">/**</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: "> * Kryo serialization class, Kryo serialization efficiency is very high, but only compatible with Java language</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: "> *</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: "> * @author shuang.kou</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: "> * @createTime 2020&#24180;05&#26376;13&#26085; 19:29:00</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: "> */</SPAN>
<SPAN class=pl-c1 style="BOX-SIZING: border-box; COLOR: ">@</SPAN><SPAN class=pl-c1 style="BOX-SIZING: border-box; COLOR: ">Slf4j</SPAN>
<SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">public</SPAN> <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">class</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">KryoSerializer</SPAN> <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">implements</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Serializer</SPAN> {

    <SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: ">/**</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: ">     * Because Kryo is not thread safe. So, use ThreadLocal to store Kryo objects</SPAN>
<SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: ">     */</SPAN>
    <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">private</SPAN> <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">final</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">ThreadLocal</SPAN>&lt;<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Kryo</SPAN>&gt; <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryoThreadLocal</SPAN> = <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">ThreadLocal</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">withInitial</SPAN>(() -&gt; {
        <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Kryo</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN> = <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Kryo</SPAN>();
        <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">register</SPAN>(<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">RpcResponse</SPAN>.<SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">class</SPAN>);
        <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">register</SPAN>(<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">RpcRequest</SPAN>.<SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">class</SPAN>);
        <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">return</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN>;
    });

    <SPAN class=pl-c1 style="BOX-SIZING: border-box; COLOR: ">@</SPAN><SPAN class=pl-c1 style="BOX-SIZING: border-box; COLOR: ">Override</SPAN>
    <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">public</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">byte</SPAN>[] <SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">serialize</SPAN>(<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Object</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">obj</SPAN>) {
        <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">try</SPAN> (<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">ByteArrayOutputStream</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">byteArrayOutputStream</SPAN> = <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">ByteArrayOutputStream</SPAN>();
             <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Output</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">output</SPAN> = <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Output</SPAN>(<SPAN class=pl-s1 style="BOX-SIZING: border-box">byteArrayOutputStream</SPAN>)) {
            <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Kryo</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN> = <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryoThreadLocal</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">get</SPAN>();
            <SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: ">// Object-&gt;byte:&#23558;&#23545;&#35937;&#24207;&#21015;&#21270;&#20026;byte&#25968;&#32452;</SPAN>
            <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">writeObject</SPAN>(<SPAN class=pl-s1 style="BOX-SIZING: border-box">output</SPAN>, <SPAN class=pl-s1 style="BOX-SIZING: border-box">obj</SPAN>);
            <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryoThreadLocal</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">remove</SPAN>();
            <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">return</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">output</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">toBytes</SPAN>();
        } <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">catch</SPAN> (<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Exception</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">e</SPAN>) {
            <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">throw</SPAN> <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">SerializeException</SPAN>(<SPAN class=pl-s style="BOX-SIZING: border-box; COLOR: ">"Serialization failed"</SPAN>);
        }
    }

    <SPAN class=pl-c1 style="BOX-SIZING: border-box; COLOR: ">@</SPAN><SPAN class=pl-c1 style="BOX-SIZING: border-box; COLOR: ">Override</SPAN>
    <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">public</SPAN> &lt;<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">T</SPAN>&gt; <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">T</SPAN> <SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">deserialize</SPAN>(<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">byte</SPAN>[] <SPAN class=pl-s1 style="BOX-SIZING: border-box">bytes</SPAN>, <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Class</SPAN>&lt;<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">T</SPAN>&gt; <SPAN class=pl-s1 style="BOX-SIZING: border-box">clazz</SPAN>) {
        <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">try</SPAN> (<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">ByteArrayInputStream</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">byteArrayInputStream</SPAN> = <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">ByteArrayInputStream</SPAN>(<SPAN class=pl-s1 style="BOX-SIZING: border-box">bytes</SPAN>);
             <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Input</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">input</SPAN> = <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Input</SPAN>(<SPAN class=pl-s1 style="BOX-SIZING: border-box">byteArrayInputStream</SPAN>)) {
            <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Kryo</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN> = <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryoThreadLocal</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">get</SPAN>();
            <SPAN class=pl-c style="BOX-SIZING: border-box; COLOR: ">// byte-&gt;Object:&#20174;byte&#25968;&#32452;&#20013;&#21453;&#24207;&#21015;&#21270;&#20986;&#23545;&#35937;</SPAN>
            <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Object</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">o</SPAN> = <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryo</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">readObject</SPAN>(<SPAN class=pl-s1 style="BOX-SIZING: border-box">input</SPAN>, <SPAN class=pl-s1 style="BOX-SIZING: border-box">clazz</SPAN>);
            <SPAN class=pl-s1 style="BOX-SIZING: border-box">kryoThreadLocal</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">remove</SPAN>();
            <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">return</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">clazz</SPAN>.<SPAN class=pl-en style="BOX-SIZING: border-box; COLOR: ">cast</SPAN>(<SPAN class=pl-s1 style="BOX-SIZING: border-box">o</SPAN>);
        } <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">catch</SPAN> (<SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">Exception</SPAN> <SPAN class=pl-s1 style="BOX-SIZING: border-box">e</SPAN>) {
            <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">throw</SPAN> <SPAN class=pl-k style="BOX-SIZING: border-box; COLOR: ">new</SPAN> <SPAN class=pl-smi style="BOX-SIZING: border-box; COLOR: ">SerializeException</SPAN>(<SPAN class=pl-s style="BOX-SIZING: border-box; COLOR: ">"Deserialization failed"</SPAN>);
        }
    }

}</PRE>
<DIV class=zeroclipboard-container style="BOX-SIZING: border-box; DISPLAY: block; animation: auto ease 0s 1 normal none running none"><CLIPBOARD-COPY role=button tabIndex=0 aria-label=Copy class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 tooltipped-no-delay d-flex flex-justify-center flex-items-center" style="BOX-SIZING: border-box; FONT-SIZE: 14px; CURSOR: pointer; BORDER-TOP: 0px; BORDER-RIGHT: 0px; VERTICAL-ALIGN: middle; WHITE-SPACE: nowrap; BORDER-BOTTOM: 0px; POSITION: relative; COLOR: ; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; DISPLAY: flex !important; LINE-HEIGHT: 20px; PADDING-RIGHT: 0px !important; BACKGROUND-COLOR: transparent; border-radius: 6px; justify-content: center; user-select: none; appearance: none; box-shadow: none; transition: color 80ms cubic-bezier(0.33, 1, 0.68, 1) 0s, background-color, box-shadow, border-color; align-items: center" value='/**&#10; * Kryo serialization class, Kryo serialization efficiency is very high, but only compatible with Java language&#10; *&#10; * @author shuang.kou&#10; * @createTime 2020&#24180;05&#26376;13&#26085; 19:29:00&#10; */&#10;@Slf4j&#10;public class KryoSerializer implements Serializer {&#10;&#10;    /**&#10;     * Because Kryo is not thread safe. So, use ThreadLocal to store Kryo objects&#10;     */&#10;    private final ThreadLocal<Kryo> kryoThreadLocal = ThreadLocal.withInitial(() -> {&#10;        Kryo kryo = new Kryo();&#10;        kryo.register(RpcResponse.class);&#10;        kryo.register(RpcRequest.class);&#10;        return kryo;&#10;    });&#10;&#10;    @Override&#10;    public byte[] serialize(Object obj) {&#10;        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();&#10;             Output output = new Output(byteArrayOutputStream)) {&#10;            Kryo kryo = kryoThreadLocal.get();&#10;            // Object->byte:&#23558;&#23545;&#35937;&#24207;&#21015;&#21270;&#20026;byte&#25968;&#32452;&#10;            kryo.writeObject(output, obj);&#10;            kryoThreadLocal.remove();&#10;            return output.toBytes();&#10;        } catch (Exception e) {&#10;            throw new SerializeException("Serialization failed");&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public <T> T deserialize(byte[] bytes, Class<T> clazz) {&#10;        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);&#10;             Input input = new Input(byteArrayInputStream)) {&#10;            Kryo kryo = kryoThreadLocal.get();&#10;            // byte->Object:&#20174;byte&#25968;&#32452;&#20013;&#21453;&#24207;&#21015;&#21270;&#20986;&#23545;&#35937;&#10;            Object o = kryo.readObject(input, clazz);&#10;            kryoThreadLocal.remove();&#10;            return clazz.cast(o);&#10;        } catch (Exception e) {&#10;            throw new SerializeException("Deserialization failed");&#10;        }&#10;    }&#10;&#10;}' data-tooltip-direction="w" data-copy-feedback="Copied!"><SVG aria-hidden=true class="octicon octicon-copy js-clipboard-copy-icon" height="16" width="16" version="1.1" viewBox="0 0 16 16" data-view-component="true"><PATH d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></PATH><PATH d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></PATH></SVG></CLIPBOARD-COPY></DIV></DIV>
<P style='BOX-SIZING: border-box; FONT-SIZE: 16px; MARGIN-BOTTOM: 16px; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(31,35,40); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>GitHub &#22320;&#22336;&#65306;<A style="BOX-SIZING: border-box; TEXT-DECORATION: underline; COLOR: ; BACKGROUND-COLOR: transparent; text-underline-offset: 0.2rem" href="https://github.com/EsotericSoftware/kryo"><FONT color=#0066cc>https://github.com/EsotericSoftware/kryo</FONT></A><SPAN>&nbsp;</SPAN>&#12290;